<?php
/**
 * @file
 * Drupal Module: Force New Password
 * @author Flavio Torelli
 *
 * Implements hook_user_presave, hook_permission, hook_menu,
 * hook_user_update, hook_login_alter 
 */

define('FORCE_NEW_PASSWORD_DISCLAIMER_PAGE', variable_get('force_new_password_disclaimer_page', ''));
define('FORCE_NEW_PASSWORD_RESULT_PAGE', variable_get('force_new_password_result_page', ''));
define('FORCE_NEW_PASSWORD_ROLE_NAME', variable_get('force_new_password_role_name', ''));

include __DIR__ . '/force_new_password.common.inc';

/**
 * Implements hook_permission().
 */
function force_new_password_permission() {
  return array(
    'force new password' => array(
      'title' => t('Force new password'),
      'description' => t('Foce new password administration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function force_new_password_menu() {

  $items = array();

  $items['admin/config/force_new_password'] = array(
    'title' => 'Force new password',
    'description' => 'Configure user role and disclaimer page.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('force new password'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/force_new_password/general'] = array(
    'title' => 'General settings',
    'description' => 'Configure user role and disclaimer page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('force_new_password_genaral_config'),
    'access arguments' => array('force new password'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'force_new_password.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_user_presave().
 */
function force_new_password_user_presave(&$edit, $account, $category) {

  global $user;
  $is_migrated_user = _force_new_password_role_matches($account);

  // Removing the new password role to avoiding loop.
  if ($is_migrated_user && $user->uid != 1) {
    $role = user_role_load_by_name(FORCE_NEW_PASSWORD_ROLE_NAME);
    $role_id = $role->rid;
    unset($account->roles[$role_id]);
    unset($edit['roles'][$role_id]);
  }

}


/**
 * Implements hook_user_update().
 */
function force_new_password_user_update(&$edit, $account, $category) {

  global $user;
  if ($user->uid == 1) {
    return;
  }

  $user = user_load($account->uid);
  drupal_session_regenerate();
  drupal_goto(FORCE_NEW_PASSWORD_RESULT_PAGE);

}

/**
 * Implements hook_form_user_login_alter().
 */
function force_new_password_form_user_login_alter(&$form, &$form_state, $form_id) {
  // It will trigger a custom validate to intercept the user login.
  array_unshift($form['#validate'], 'force_new_password_user_login_validate');
}

/**
 * Intercepting user login and check if password change is needed.
 */
function force_new_password_user_login_validate(&$form, &$form_state) {

  $name = check_plain($form['name']['#value']);

  $user = user_load_by_name($name);

  // In case of using e-mail as username authentication method.
  if ($user == FALSE && valid_email_address($name)) {
    $user = user_load_by_mail($name);
  }

  if ($user) {
    if (_force_new_password_role_matches($user)) {
      _user_mail_notify('password_reset', $user);
      drupal_goto(FORCE_NEW_PASSWORD_DISCLAIMER_PAGE);
    }
  }

}
